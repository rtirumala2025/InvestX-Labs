version: '3.8'

services:
  # Main API service
  ai-investment-backend:
    build: .
    container_name: ai-investment-backend
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_DEBUG=false
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - CHROMA_PERSIST_DIRECTORY=/app/chroma_db
    env_file:
      - .env
    volumes:
      - ./chroma_db:/app/chroma_db
      - ./logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: ai-investment-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ai-investment-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ai-investment-backend
    restart: unless-stopped

  # Data pipeline scheduler (optional, can run as separate service)
  data-pipeline:
    build: .
    container_name: ai-investment-pipeline
    command: python -m data_pipeline.scheduler
    environment:
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - CHROMA_PERSIST_DIRECTORY=/app/chroma_db
    env_file:
      - .env
    volumes:
      - ./chroma_db:/app/chroma_db
      - ./logs:/app/logs
    depends_on:
      - redis
      - ai-investment-backend
    restart: unless-stopped

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: ai-investment-network
