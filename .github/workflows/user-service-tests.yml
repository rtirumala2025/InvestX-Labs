name: User Service Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/src/services/userService.js'
      - 'frontend/__tests__/userService.test.js'
      - 'frontend/scripts/testUserService.js'
      - 'frontend/scripts/testIntegration.js'
      - 'backend/supabase/migrations/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/src/services/userService.js'
      - 'frontend/__tests__/userService.test.js'
      - 'frontend/scripts/testUserService.js'
      - 'frontend/scripts/testIntegration.js'
      - 'backend/supabase/migrations/**'

env:
  NODE_VERSION: '18.x'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:user
        env:
          CI: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: frontend/coverage/
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run integration tests
        working-directory: ./frontend
        run: npm run test:integration
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          REACT_APP_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          TEST_USER_ID: ${{ secrets.TEST_USER_ID }}
      
      - name: Fail if connection test fails
        if: failure()
        run: |
          echo "::error::Integration tests failed. Check Supabase connection and RPC functions."
          exit 1
  
  service-tests:
    name: Service Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run service tests
        working-directory: ./frontend
        run: npm run test:service
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          REACT_APP_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          TEST_USER_ID: ${{ secrets.TEST_USER_ID }}
          VERBOSE: true
  
  supabase-health-check:
    name: Supabase RPC Health Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Supabase client
        run: npm install -g @supabase/supabase-js
      
      - name: Check RPC functions
        run: |
          node -e "
          import('@supabase/supabase-js').then(({ createClient }) => {
            const supabase = createClient(
              process.env.SUPABASE_URL,
              process.env.SUPABASE_ANON_KEY
            );
            
            return supabase
              .rpc('check_user_rpcs_health')
              .single()
              .then(({ data, error }) => {
                if (error) throw error;
                console.log('Health check:', data);
                if (!data.healthy) {
                  throw new Error('Some RPCs are missing');
                }
                console.log('✅ All RPCs are healthy');
              });
          }).catch(err => {
            console.error('❌ Health check failed:', err.message);
            process.exit(1);
          });
          "
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  
  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, service-tests, supabase-health-check]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All user service tests completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Service Tests: ${{ needs.service-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Supabase Health: ${{ needs.supabase-health-check.result }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Fail if any test failed
        if: |
          needs.unit-tests.result == 'failure' ||
          needs.integration-tests.result == 'failure' ||
          needs.service-tests.result == 'failure' ||
          needs.supabase-health-check.result == 'failure'
        run: |
          echo "::error::One or more test suites failed"
          exit 1
